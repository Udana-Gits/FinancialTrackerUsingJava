/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package authentication;

//import static com.sun.xml.internal.ws.spi.db.BindingContextFactory.LOGGER;
//import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileOutputStream;
import javax.swing.JOptionPane;
import org.apache.poi.ss.util.CellRangeAddress;

/**
 *
 * @author ASUS
 */
public class Reports extends javax.swing.JFrame {

    /**
     * Creates new form Reports
     */
    private Home home;
    private int UserId ;
    private float balance;
    private LocalDate currentDate;
    private static final String[] INCOME_COLUMN_HEADERS = {"ID", "Amount", "Source", "Date", "Note"};
    private static final String[] EXPENSE_COLUMN_HEADERS = {"ID", "Amount", "Reason", "Date", "Note"};
   // private static final String TITLE = "Expense Report";
    float totalIncome = 0.0f;
    float totalExpense = 0.0f;

    DB db = new DB();
    
    public Reports(){
        
    }
    
    public Reports(Home home) {
        this.home = home;
        currentDate = LocalDate.now(); 
        initComponents();
        UserId = home.getUserId();
        balance = home.getbal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Genarate Reports");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Month", "Year" }));

        jLabel2.setText("Type");

        jButton1.setText("Genarate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Report's Name");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Location : ");

        jLabel5.setText("Year& Month");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2022", "2023", "2024", "2025", "2026", "2027", "2028" }));
        jComboBox2.setSelectedIndex(2);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        jComboBox3.setSelectedItem(Integer.toString(currentDate.getMonthValue()));

        jLabel6.setText("Year");

        jLabel7.setText("Month");

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Expense", "Income", "Income Vs Expense" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(101, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jButton1)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String name = jTextField1.getText();
        String type = (String) jComboBox1.getSelectedItem();
        String inputyear = (String) jComboBox2.getSelectedItem();
        String inputmonth = (String) jComboBox3.getSelectedItem();
        String catagory = (String) jComboBox4.getSelectedItem();
        
        if(!name.isEmpty()){
        String excelFile = name + ".xlsx";
        String table="";
        Connection cn = null;
        PreparedStatement pstmt1 = null;
        PreparedStatement pstmt2 = null;
        ResultSet rs1 = null;
        ResultSet rs2 = null;
            System.out.println("0");
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Expense Data");
            System.out.println("1");
        try {
            cn = db.getCon();
            System.out.println("2");
            String TITLE ="";
            if(catagory.equals("Income")){
                TITLE = "Income Report";
            } else if(catagory.equals("Expense")){
                TITLE = "Expense Report";
            } else if(catagory.equals("Income Vs Expense")){
                TITLE = "Income Vs Expense Report";
            }
            // Create a title row
            Row titleRow = sheet.createRow(0);
            Cell titleCell = titleRow.createCell(0);
            titleCell.setCellValue(TITLE);

            // Merge the title cells
            sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, INCOME_COLUMN_HEADERS.length - 1));

            // Apply some styling to the title cell (optional)
            CellStyle titleStyle = workbook.createCellStyle();
            Font titleFont = workbook.createFont();
            titleFont.setFontHeightInPoints((short) 16);
            titleFont.setBold(true);
            titleStyle.setFont(titleFont);
            titleCell.setCellStyle(titleStyle);
            titleStyle.setAlignment(HorizontalAlignment.CENTER);  // Center alignment

            titleCell.setCellStyle(titleStyle);
            
            // Create a header row
            Row headerRow = sheet.createRow(1);
            
            if(catagory.equals("Income")){  
                for (int i = 0; i < INCOME_COLUMN_HEADERS.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(INCOME_COLUMN_HEADERS[i]);
                }
            }else if(catagory.equals("Expense")){
                for (int i = 0; i < EXPENSE_COLUMN_HEADERS.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(EXPENSE_COLUMN_HEADERS[i]);
            }
            }else if(catagory.equals("Income Vs Expense")){
                Cell tableCell = headerRow.createCell(0);
                tableCell.setCellValue("Income Deteils");
                Row tableheaderRow = sheet.createRow(2);
                for (int i = 0; i < INCOME_COLUMN_HEADERS.length; i++) {
                    Cell cell = tableheaderRow.createCell(i);
                    cell.setCellValue(INCOME_COLUMN_HEADERS[i]);    
            }
            }

            String query = "";
            String query1 = "";
            if (type.equals("Month")&& catagory.equals("Expense")) {
                table="expense";
                query = "SELECT e.id, e.Reason, e.Amount, e.year, e.month, e.date, e.Note " +
                        "FROM expense e " +
                        "WHERE e.User_ID = ? " +
                        "AND e.month = ? " +
                        "AND e.year = ?";
                pstmt1 = cn.prepareStatement(query);
                pstmt1.setInt(1, UserId);
                pstmt1.setString(2, inputmonth); // Month
                pstmt1.setString(3, inputyear);  // Year
                
            } else if (type.equals("Year")&& catagory.equals("Expense")) {
                table="expense";
                query = "SELECT e.id, e.Reason, e.Amount, e.year, e.month, e.date, e.Note " +
                        "FROM expense e " +
                        "WHERE e.User_ID = ? " +
                        "AND e.year = ?";
                pstmt1 = cn.prepareStatement(query);
                pstmt1.setInt(1, UserId);
                pstmt1.setString(2, inputyear);  // Year
                
            } else if(type.equals("Month")&& catagory.equals("Income")){
                table="income";
                query = "SELECT i.id, i.Amount, i.Source, i.year, i.month, i.Date, i.Note " +
                        "FROM income i " +
                        "WHERE i.User_ID = ? " +
                        "AND i.month = ? " +
                        "AND i.year = ?";
                pstmt1 = cn.prepareStatement(query);
                pstmt1.setInt(1, UserId);
                pstmt1.setString(2, inputmonth); // Month
                pstmt1.setString(3, inputyear);
                
            }else if(type.equals("Year")&& catagory.equals("Income")){
                table="income";
                query = "SELECT i.id, i.Amount, i.Source, i.year, i.month, i.Date, i.Note " +
                        "FROM income i " +
                        "WHERE i.User_ID = ? " +
                        "AND i.year = ?";
                pstmt1 = cn.prepareStatement(query);
                pstmt1.setInt(1, UserId);
                pstmt1.setString(2, inputyear); 
                
            }else if(type.equals("Month")&& catagory.equals("Income Vs Expense") ){
                table="both";
                query = "SELECT i.id, i.Amount, i.Source, i.year, i.month, i.Date, i.Note " +
                        "FROM income i " +
                        "WHERE i.User_ID = ? " +
                        "AND i.month = ? " +
                        "AND i.year = ?";
                pstmt1 = cn.prepareStatement(query);
                pstmt1.setInt(1, UserId);
                pstmt1.setString(2, inputmonth); // Month
                pstmt1.setString(3, inputyear);
                
                
                
                query1 = "SELECT e.id, e.Reason, e.Amount, e.year, e.month, e.date, e.Note " +
                        "FROM expense e " +
                        "WHERE e.User_ID = ? " +
                        "AND e.month = ? " +
                        "AND e.year = ?";
                pstmt2 = cn.prepareStatement(query1);
                pstmt2.setInt(1, UserId);
                pstmt2.setString(2, inputmonth); // Month
                pstmt2.setString(3, inputyear);  // Year
                
                rs2 = pstmt2.executeQuery();
                
            } else if(type.equals("Year")&& catagory.equals("Income Vs Expense")){
                table="both";
                query = "SELECT i.id, i.Amount, i.Source, i.year, i.month, i.Date, i.Note " +
                        "FROM income i " +
                        "WHERE i.User_ID = ? " +
                        "AND i.year = ?";
                pstmt1 = cn.prepareStatement(query);
                pstmt1.setInt(1, UserId);
                pstmt1.setString(2, inputyear);
                
                
                query1 = "SELECT e.id, e.Reason, e.Amount, e.year, e.month, e.date, e.Note " +
                        "FROM expense e " +
                        "WHERE e.User_ID = ? " +
                        "AND e.year = ?";
                pstmt2 = cn.prepareStatement(query1);
                pstmt2.setInt(1, UserId);
                pstmt2.setString(2, inputyear);  // Year
                
                rs2 = pstmt2.executeQuery();
            }

           rs1 = pstmt1.executeQuery();

            int rowNum = 2;
            
            if(table.equals("expense")){
            while (rs1.next()) {
                int income_id = rs1.getInt("id");
                String reason = rs1.getString("Reason");
                float amount = rs1.getFloat("Amount");
                String year = rs1.getString("year");
                String month = rs1.getString("month");
                String date = rs1.getString("date");
                String note = rs1.getString("Note");
                String fullDate = year + "/" + month + "/" + date;

                // Create a new row in the sheet
                Row row = sheet.createRow(rowNum++);

                // Write data to cells
                row.createCell(0).setCellValue(income_id);
                row.createCell(1).setCellValue(amount);
                row.createCell(2).setCellValue(reason);
                row.createCell(3).setCellValue(fullDate);
                row.createCell(4).setCellValue(note);
            }
            }else if(table.equals("income")){
                while (rs1.next()) {
                int income_id = rs1.getInt("id");
                String source = rs1.getString("Source");
                float amount = rs1.getFloat("Amount");
                String year = rs1.getString("year");
                String month = rs1.getString("month");
                String date = rs1.getString("date");
                String note = rs1.getString("Note");
                String fullDate = year + "/" + month + "/" + date;

                // Create a new row in the sheet
                Row row = sheet.createRow(rowNum++);

                // Write data to cells
                row.createCell(0).setCellValue(income_id);
                row.createCell(1).setCellValue(amount);
                row.createCell(2).setCellValue(source);
                row.createCell(3).setCellValue(fullDate);
                row.createCell(4).setCellValue(note);
            }
            } else if(table.equals("both")){
                
             int tablerowNum = 3;
              
                 while (rs1.next()) {
                int income_id = rs1.getInt("id");
                String source = rs1.getString("Source");
                float amount = rs1.getFloat("Amount");
                String year = rs1.getString("year");
                String month = rs1.getString("month");
                String date = rs1.getString("date");
                String note = rs1.getString("Note");
                String fullDate = year + "/" + month + "/" + date;

                // Create a new row in the sheet
                Row row = sheet.createRow(tablerowNum++);

                // Write data to cells
                row.createCell(0).setCellValue(income_id);
                row.createCell(1).setCellValue(amount);
                row.createCell(2).setCellValue(source);
                row.createCell(3).setCellValue(fullDate);
                row.createCell(4).setCellValue(note);
                
               totalIncome = totalIncome+amount;
                }
                 // Add a row for the total amount
                    Row totalRow = sheet.createRow(tablerowNum);
                    Cell totalLabelCell = totalRow.createCell(0);
                    totalLabelCell.setCellValue("Total Income : ");
                    Cell totalAmountCell = totalRow.createCell(1);
                    totalAmountCell.setCellValue(totalIncome);

                    // Apply some styling to the total amount row (optional)
                    CellStyle totalStyle = workbook.createCellStyle();
                    Font totalFont = workbook.createFont();
                    totalFont.setFontHeightInPoints((short) 12);
                    totalFont.setBold(true);
                    totalStyle.setFont(totalFont);
                    totalLabelCell.setCellStyle(totalStyle);
                    totalAmountCell.setCellStyle(totalStyle);
                
                 
                 Row secondtableHeader = sheet.createRow(tablerowNum+4);
                Cell secondtableCell = secondtableHeader.createCell(0);
                secondtableCell.setCellValue("Expense Deteils");
                Row secondtableheaderRow = sheet.createRow(tablerowNum+5);
                for (int i = 0; i < EXPENSE_COLUMN_HEADERS.length; i++) {
                Cell cell = secondtableheaderRow.createCell(i);
                cell.setCellValue(EXPENSE_COLUMN_HEADERS[i]);
            }
                int secondtablerowNum = tablerowNum+6;
                rs2 = pstmt2.executeQuery();
                while (rs2.next()) {
                int income_id = rs2.getInt("id");
                String reason = rs2.getString("Reason");
                float examount = rs2.getFloat("Amount");
                String year = rs2.getString("year");
                String month = rs2.getString("month");
                String date = rs2.getString("date");
                String note = rs2.getString("Note");
                String fullDate = year + "/" + month + "/" + date;

                // Create a new row in the sheet
                Row row = sheet.createRow(secondtablerowNum++);

                // Write data to cells
                row.createCell(0).setCellValue(income_id);
                row.createCell(1).setCellValue(examount);
                row.createCell(2).setCellValue(reason);
                row.createCell(3).setCellValue(fullDate);
                row.createCell(4).setCellValue(note);
                
                totalExpense = totalExpense+examount;
            }
                // Add a row for the total amount
                    Row totalex = sheet.createRow(secondtablerowNum);
                    Cell totalExCell = totalex.createCell(0);
                    totalExCell.setCellValue("Total Expense: ");
                    Cell totalExpenAmountCell = totalex.createCell(1);
                    totalExpenAmountCell.setCellValue(totalExpense);

                    // Apply some styling to the total amount row (optional)
                    totalExCell.setCellStyle(totalStyle);
                    totalExpenAmountCell.setCellStyle(totalStyle);
                    
                for (int i = 0; i < EXPENSE_COLUMN_HEADERS.length; i++) {
                sheet.autoSizeColumn(i);
            }
            }

            // Resize columns to fit the content
            for (int i = 0; i < INCOME_COLUMN_HEADERS.length; i++) {
                sheet.autoSizeColumn(i);
            }

            // Write the output to an Excel file
            try (FileOutputStream fileOut = new FileOutputStream(excelFile)) {
                workbook.write(fileOut);
                System.out.println("Excel file created successfully!");
            }

        } catch (SQLException | IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (rs1 != null) rs1.close();
                if (pstmt1 != null) pstmt1.close();
                if (cn != null) cn.close();
                if (workbook != null) workbook.close();
            } catch (SQLException | IOException ex) {
                ex.printStackTrace();
            }
        }
        }else{
            JOptionPane.showMessageDialog(null, "Please provide name to the file.");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Home h1 = new Home(UserId);
        h1.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
